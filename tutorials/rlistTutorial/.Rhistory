}
http_type(resp_json)
resp_json <- rev_history("Hadley Wickham")
function(title, format = "json"){
if (title != "Hadley Wickham") {
stop('rev_history() only works for `title = "Hadley Wickham"`')
}
if (format == "json"){
resp <- readRDS("had_rev_json.rds")
} else if (format == "xml"){
resp <- readRDS("had_rev_xml.rds")
} else {
stop('Invalid format supplied, try "json" or "xml"')
}
resp
}
resp_json <- rev_history("Hadley Wickham")
rev_history <- function(title, format = "json"){
if (title != "Hadley Wickham") {
stop('rev_history() only works for `title = "Hadley Wickham"`')
}
if (format == "json"){
resp <- readRDS("had_rev_json.rds")
} else if (format == "xml"){
resp <- readRDS("had_rev_xml.rds")
} else {
stop('Invalid format supplied, try "json" or "xml"')
}
resp
}
resp_json <- rev_history("Hadley Wickham")
rev_history <- function(title, format = "json"){
if (title != "Hadley Wickham") {
stop('rev_history() only works for `title = "Hadley Wickham"`')
}
if (format == "json"){
resp <- readRDS("had_rev_json.rds")
} else if (format == "xml"){
resp <- readRDS("had_rev_xml.rds")
} else {
stop('Invalid format supplied, try "json" or "xml"')
}
resp
}
resp_json <- rev_history("Hadley Wickham")
URL_wick <- "https://en.wikipedia.org/w/api.php?action=query&titles=Hadley%20Wickham&prop=revisions&rvprop=timestamp%7Cuser%7Ccomment%7Ccontent&rvlimit=5&format=json&rvdir=newer&rvstart=2015-01-14T17%3A12%3A45Z&rvsection=0"
resp <- GET(URL_wick)
content(resp)
saveRDS(resp, "had_rev_json.rds")
rev_history <- function(title, format = "json"){
if (title != "Hadley Wickham") {
stop('rev_history() only works for `title = "Hadley Wickham"`')
}
if (format == "json"){
resp <- readRDS("had_rev_json.rds")
# resp <- content(URL_wick)
} else if (format == "xml"){
resp <- readRDS("had_rev_xml.rds")
} else {
stop('Invalid format supplied, try "json" or "xml"')
}
resp
}
resp_json <- rev_history("Hadley Wickham")
resp_json
getwd()
http_type(resp_json)
content(resp_json, as = "text")
library(jsonlite)
fromJSON(content(resp_json), as = "text")
fromJSON(content(resp_json, as = "text"))
fromJSON(content(resp_json, as = "text"))
f <- fromJSON(content(resp_json, as = "text"))
class(f)
str(f)
str(content(resp_json), max.level = 4)
content(resp_json)$query$page
content(resp_json)$query$page$`41916270`$revisions
user_time <- list.select(revs, user, timestamp)
library(rlist)
user_time <- list.select(revs, user, timestamp)
revs <- content(resp_json)$query$page$`41916270`$revisions
user_time <- list.select(revs, user, timestamp)
print(user_time)
list.stack(user_time)
print(user_time)
revs <- content(resp_json)$query$pages$`41916270`$revisions
revs
revs %>%
bind_rows()
library(dplyr)
revs %>%
bind_rows()
revs
?bind_rows
revs %>%
bind_rows() %>%
select(user, timestamp)
setwd("~/courses/tutorials/rlistTutorial")
url <- "http://renkun.me/rlist-tutorial/data/people.json"
people <- list.load(url)
GET(url)
url <- "https://renkun-ken.github.io/rlist-tutorial/data/people.json"
GET(url)
library(jsonlite)
people <- fromJSON(content_response)
content_response <- content(response, format = text)
content_response <- content(response, format = "text")
people <- fromJSON(content_response)
content_response <- content(response, as = "text")
content_response <- content(response, as = "text")
response <- GET(url)
content_response <- content(response, as = "text")
people <- fromJSON(content_response)
str(people)
people
class(people)
people <- fromJSON(content_response)
class(people)
content_response <- content(response, as = "text")
people <- fromJSON(content_response)
class(people)
content_response
people <- list.load(url)
people
url <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com"
url <- paste(url_host_base, endpoint_countries, sep = "/")
url_host_base <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/swagger"
endpoint_countries <- "countries"
url <- paste(url_host_base, endpoint_countries, sep = "/")
url
response <- GET(url)
print(response)
url_host_base <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/docs"
endpoint_countries <- "countries"
url <- paste(url_host_base, endpoint_countries, sep = "/")
response <- GET(url)
print(response)
content(response)
content_response <- content(response, as = "text")
j <- fromJSON(content_response)
j
j <- fromJSON(content_response, simplifyDataFrame = FALSE)
j
data <- fromJSON(content_response, simplifyDataFrame = FALSE)
str(data)
head(data)
url <- "https://renkun-ken.github.io/rlist-tutorial/data/sample.json"
str(people)
lapply(people, function(x) {x$Name} )
data
data[[1]]
people
head(people)
str(x)
str(people)
str(data)
lapply(data, function(x) {x$id} )
list.map(people, Name)
str(data, max.level = 5)
list.map(data, competitions)
list.map(data, name, competitions)
str(data, max.level = 5)
list.map(data, name)
list.map(people, Expertise)
list.map(people, as.numeric(Expertise))
list.map(people, Expertise)
)
list.map(people, as.numeric(Expertise))
list.map(people, sum(as.numeric(Expertise)))
list.map(people, name)
list.map(people, Age)
str(people)
list.map(people, list(age = Age, range=range(as.numeric(Expertise))))
head(list.map(people, list(age = Age, range=range(as.numeric(Expertise)))))
list.map(people, list(age=Age, range=range(as.numeric(Expertise))))
range(2,3)
range(2,5)
range(2,5,6,7)
library(rapiclient)
api <- get_api(URL)
operations <- get_operations(api)
schemas <- get_schemas(api)
library(rlist)
url <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/swagger"
api <- get_api(URL)
operations <- get_operations(api)
schemas <- get_schemas(api)
api <- get_api(url)
operations <- get_operations(api)
schemas <- get_schemas(api)
str(operations)
??rapiclient
operations$getCountries()
operations$getCountries(feedId = 1)
res <- operations$getCountries(feedId = 1)
str(httr::content(rest))
str(httr::content(res))
res <- operations$getCountries(feedId = 1)
str(httr::content(res))
res <- operations$getCountries(feedId = 1)
res
res <- operations$getCountries()
res <- operations$getCountry()
res <- operations$getCountry(id = 1)
library(httr)
long_url <- paste(url, 1, sep = "/")
GET(long_url)
schemas
url <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/swagger"
api <- get_api(url)
operations <- get_operations(api)
schemas <- get_schemas(api)
long_url <- paste(url,countries, id, 1, sep = "/")
GET(long_url)
long_url <- paste(url,"countries", id, 1, sep = "/")
GET(long_url)
long_url <- paste(url,"countries", "id", 1, sep = "/")
GET(long_url)
long_url <- paste(url_docs,"countries", "id", 1, sep = "/")
url_docs <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/docs"
long_url <- paste(url_docs,"countries", "id", 1, sep = "/")
GET(long_url)
url <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com"
url <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com"
long_url <- paste(url,"countries", "id", 1, sep = "/")
GET(long_url)
long_url
long_url <- paste(url,"countries", 1, sep = "/")
GET(long_url)
operations$getCountry(1)
operations$getCountry(id = 1)
operations$getCountry(id = 1)
add_headers(.headers = c(id = 1))
add_headers(.headers = c(id = "1"))
operations$getCountry(headers)
operations$search(feedId = 1, name = "england")
operations$search(feedId = 1, name = "england", limit = 20, page = 0)
api <- get_api(url_swagger)
url_swagger <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/swagger"
api <- get_api(url_swagger)
operations <- get_operations(api)
operations <- get_operations(api, handle_response = content_or_stop)
schemas <- get_schemas(api)
operations$getCountries(1)
operations$getCountries("1")
operations$getCountries
operations$getCountries(feedId = 1)
url_swagger <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/swagger"
api <- get_api(url_swagger)
operations <- get_operations(api)
schemas <- get_schemas(api)
operations$getCountries
(operations$getCountries)
operations$getCountrie
operations$getCountry
url_swagger <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/swagger"
api <- get_api(url_swagger)
operations <- get_operations(api)
schemas <- get_schemas(api)
operations$getCountry
operations$getCountry(id = 1)
list.map(nums, a)
nums <- c(a = 3, b = 2, c = 1)
list.map(nums, a)
nums
list.map(nums)
list.map(nums, .$1)
list.map(nums, . + 1)
list.map(nums, .i)
nums <- c(a = 3, b = 2, c = 1)
nums
list.map(nums, .i)
list.map(nums, .name)
list.map(nums, .i)
list.map(nums, . + 1)
?paset0
?paste0
paste0("hola", "jdfad")
list.map(nums, paste0("name: ", .name))
list.mapv(people, Age)
url <- "https://renkun-ken.github.io/rlist-tutorial/data/sample.json"
people <- list.load(url)
str(people)
list.mapv(people, Age)
list.map(people, Age)
unlist(list.map(people, Age))
list.mapv(people, Age)
list.select(people, Name, Age)
list.select(people, Name, Age, nlang = length(Expertise))
str(people, max.level = 2)
list.select(people, Name, Age)
list.maps(a$x*b)
l1 <- list(p1 = list(x = 1, y = 2 ), p2 = list(x = 3, y = 4 ), p3 = list(x = 1, y = 3 ))
l2 <- list(2, 3, 5)
list.maps(a$x*b)
list.maps(a$x*b + a$y, a = l1, b = l2)
people
list.map(people, Age)
list.map(people, expertise)
list.map(people, Expertise)
list.map(people, R)
list.map(people, Name, R)
list.map(people, c(Name, R))
list.select(people, R)
list.map(people, R)
list.map(people, Expertise)
list.map(people, Name, Expertise)
list.map(people,  Expertise$R)
list.select(people, Expertise$R )
list.select(people, name )
list.select(people, Names )
list.select(people, Name )
list.map(people,  Name)
list.select(people, Name )
list.select(people, Name, Age )
people %>%
list.filter(Age >= 25)
people %>%
list.filter(Age >= 25) %>%
select(Name, Age)
people %>%
list.filter(Age >= 25) %>%
select(Name, Age)
people %>%
list.filter(Age >= 25)
people
people %>%
list.filter(Age >= 20)
people %>%
list.filter(Age >= 20) %>%
select(Name, Age)
list.select(people, Name, Age )
people %>%
list.filter(Age >= 20) %>%
select(Name, Age)
people %>%
list.filter(Age >= 20) %>%
list.select(Name, Age)
people
people %>%
list.filter("music" %in% Interests) %>%
list.mapv(Name)
people %>%
list.filter(mean(as.numeric(Expertise)) >= 3) %>%
list.mapv(Name)
people %>%
list.find(Age >= 25) %>%
list.mapv(Name)
people %>%
list.find(Age >= 25, 1) %>%
list.mapv(Name)
people %>%
list.find(Age >= 20, 1) %>%
list.mapv(Name)
people %>%
list.find(Age >= 20) %>%
list.mapv(Name)
people %>%
list.find(Age >= 20, 3) %>%
list.mapv(Name)
list.findi(people, Age >= 23, 2)
list.findi(people, Age >= 23, 1)
list.first(people, Age >= 23)
list.last(people, Age >= 23)
list.tale(1:10, 3)
list.take(1:10, 3)
people %>%
list.takeWhile(Expertise$R >= 2) %>%
list.map(list(Name = Name, R = Expertise$R)) %>%
str
people %>%
list.takeWhile(Expertise$R >= 2)
people %>%
list.takeWhile(Expertise$R >= 2) %>%
list.map(list(Name = Name, R = Expertise$R))
list.map(people, Name)
list.map(people, list(Name, Expertise$R))
list.map(people, list(Name = Name, Expertise$R))
list.map(people, list(Name = Name, R= Expertise$R))
list.map(people, list(Name = Name, R = .Expertise$R))
list.map(people, list(Name = Name, R = .$Expertise$R))
list.select(people, list(Name = Name, R = .$Expertise$R))
list.map(people, list(Name = Name, R = .$Expertise$R))
m <- list.map(people, list(Name = Name, R = .$Expertise$R))
s <- list.select(people, list(Name = Name, R = .$Expertise$R))
str(m)
str(s)
s <- list.select(people, Name, Expertise$R)
s <- list.select(people, list(Name = Name, R = .$Expertise$R))
s2 <- list.select(people, Name, Expertise$R)
s2
m
s2 <- list.select(people, Name = Name , R = Expertise$R)
s2
s2 <- list.select(people, Name = Name , RR = Expertise$R)
s2
people %>%
list.skipWhile( Expertise$R <= 2) %>%
list.map(list(Name = Name, R = Expertise$R)) %>%
str
library(httr)
library(jsonlite)
host_base <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/docs"
url_countries <- paste(url_host_base, "countries", sep = "/")
response_countries <- GET(url_countries)
content_response_countries <- content(response, as = "text")
data_countries <- fromJSON(content_response, simplifyDataFrame = FALSE)
library(httr)
library(jsonlite)
host_base <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/docs"
url_countries <- paste(url_host_base, "countries", sep = "/")
response_countries <- GET(url_countries)
content_response_countries <- content(response_countries, as = "text")
data_countries <- fromJSON(content_response, simplifyDataFrame = FALSE)
library(httr)
library(jsonlite)
host_base <- "http://a3bbbb9118e9111e7b3e00ad58fb818f-460716402.eu-west-1.elb.amazonaws.com/docs"
url_countries <- paste(url_host_base, "countries", sep = "/")
response_countries <- GET(url_countries)
url_countries <- paste(host_base, "countries", sep = "/")
response_countries <- GET(url_countries)
content_response_countries <- content(response_countries, as = "text")
data_countries <- fromJSON(content_response, simplifyDataFrame = FALSE)
str(data_countries)
data_countries <- fromJSON(content_response, simplifyDataFrame = FALSE)
content_response_countries <- content(response_countries, as = "text")
data_countries <- fromJSON(content_response, simplifyDataFrame = FALSE)
response_countries
data_countries <- fromJSON(content_response_countries, simplifyDataFrame = FALSE)
str(data_countries)
str(data_countries, max.level = 2)
head(str(data_countries, max.level = 2))
head(str(data_countries, max.level = 2))
library(rlist)
list.select(data_countries, name , id )
list.filter(data_countries, name = "England" )
list.filter(data_countries, name = "england" )
list.mapv(data_countries, name )
list.filter(data_countries, name == "England")
spain <- list.filter(data, countries, name == "Spain")
spain <- list.filter(data_countries, name == "Spain")
spain
countries_id <- list.stack(list.select(data_countries, name = name, id = id))
class(countries_id)
countries_id
library(dplyr)
as_tibble(countries_id)
countries_id <- as_tibble(list.stack(list.select(data_countries, name = name, id = id)))
countries_id
england
england <- list.filter(data_countries, name == "England")
england
spain
england$id
england
list.select(england, id)
unlist(list.select(england, id))
england_id <- unlist(list.select(england, id))
england_id
url_countries_competition <- paste(url_countries, england_id, sep = "/")
url_countries_competition
response_competition <- GET(url_countries_competition)
response_competition
content_response_competition <- content(response_competition, as = "text")
content_response_competition
data_competitions <- fromJSON(content_response_competition, simplifyDataFrame = FALSE)
str(data_competitions)
data_competitions[1]
data_competitions[2]
list.filter(data_competitions, competitions$id == 8 )
list.filter(data_competitions, .$competitions$id == 8 )
list.map(data_competitions, competitions$id  )
list.map(data_competitions, competitions$id  )
data_competitions$competitions
list(data_competitions$competitions)
list.map(data_competitions, competitions$id  )
list.map(data_competitions, competitions  )
list.map(data_competitions, id  )
list.map(data_competitions, name  )
data_competitions <- fromJSON(content_response_competition, simplifyDataFrame = FALSE)
list.map(data_competitions, name)
data_competitions
str(data_competitions)
list.map(data_competitions, name)
list.map(data_competitions, name)
class(data_competitions)
data_competitions$id
list.map(data_competitions, id)
list.map(data_competitions, name)
library(rlist)
list.map(data_competitions, name)
data_countries
list.map(data_countries, name)
str(data_countries)
data_countries
data_competitions$competitions
str(data_competitions$competitions)
list.map(data_competitions$competitions, name)
list.filter(data_competitions$competitions, name = "English Premier League")
list.filter(data_competitions$competitions, name == "English Premier League")
season_codes_EPL <- list.filter(data_competitions$competitions, name == "English Premier League") %>%
select(data = name, id)
season_codes_EPL <- list.filter(data_competitions$competitions, name == "English Premier League") %>%
select(data = seasons$name, seasons$id)
season_codes_EPL <- list.filter(data_competitions$competitions, name == "English Premier League") %>%
list.select(data = seasons$name, seasons$id)
season_codes_EPL
season_codes_EPL <- list.filter(data_competitions$competitions, name == "English Premier League") %>%
list.select(seasons$name, seasons$id)
season_codes_EPL
list.filter(data_competitions$competitions, name == "English Premier League")
